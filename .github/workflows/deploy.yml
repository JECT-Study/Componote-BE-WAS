on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: 프로젝트 빌드 및 배포
    runs-on: ubuntu-latest

    steps:
      - name: 서브 모듈 확인
        uses: actions/checkout@v3
        with:
          token: ${{secrets.CONFIG_SUBMODULE_TOKEN}}
          submodules: true

      - name: 서브모듈 초기화 및 업데이트
        run: |
          git submodule sync
          git submodule update --init --recursive
          git submodule update --remote

      - name: 프로젝트 파일 확인
        run: |
          pwd
          ls -al

      - name: 서브 모듈 확인
        run: |
          pwd
          ls -al Componote-BE-Config/was

      - name: 디스크 공간 확보
        run: |
          echo "Before cleanup:"
          df -h
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/lib/jvm
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/share/swift
          echo "After cleanup:"
          df -h

      - name: JDK 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle 실행 권한 부여
        run: chmod +x gradlew

      - name: 프로젝트 빌드
        run: |
          ./gradlew clean --no-daemon
          ./gradlew build -x test --no-daemon --refresh-dependencies -Dorg.gradle.daemon=false

      - name: 생성된 JAR 파일 확인
        run: |
          pwd
          ls -al build/libs
      - name: EC2에 JAR 파일 전송 (SCP)
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # EC2에 접속해 ~/app 디렉터리 생성
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "mkdir -p ~/app"

          # app.jar를 ~/app/ 디렉터리로 복사
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa build/libs/*.jar ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/

      - name: EC2에서 JAR 파일 실행
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/app
          chmod +x componote-0.0.1-SNAPSHOT.jar
          pkill -f 'java -jar' || true
          nohup java -jar componote-0.0.1-SNAPSHOT.jar > app.log 2>&1 &
          tail -n 50 app.log
          EOF